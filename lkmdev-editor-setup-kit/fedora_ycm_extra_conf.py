# Generated by YCM Generator at 2016-10-14 00:11:51.590443

# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

### ATTENTION ###
# this config works well with clangd
# so, install YCM with
#
#  $ ./install.py --clangd-completer
#
#################

# ---- change below ----

#change this to allow remote development
#you could set this to sshfs mountpoint
REALROOT = "/"

#change this to your dev arch
ARCH = "x86"

#change this to add whatever include path
PROJECT_INCLUDES = [
        
]

#change this to append compiler flags
EXTRA_FLAGS = [

]

# ---- change above ----


########################

# from now on, you should not change anything

########################

KERNEL_HEADERS_BASE = f"{REALROOT}usr/src/kernels/__template_LINUX_UNAMER/"

KERNEL_INCLUDES = [
        f"{KERNEL_HEADERS_BASE}/include",
        f"{KERNEL_HEADERS_BASE}/arch/{ARCH}/include",
        f"{KERNEL_HEADERS_BASE}/arch/{ARCH}/include/generated",
]

KERNEL_DEFINES = [
        "__KERNEL__",
        "MODULE",
]

flags = [
        '-Wall',
        '-W',
        '-Wextra',
        '-Wshadow',
        '-xc',
        '-std=gnu11',
        '-nostdinc',
        '-nostdlib',
        '-nobuiltininc',
        '-ffreestanding',
        '-fno-builtin',
]

for kernel_define in KERNEL_DEFINES:
    flags.append(f"-D{kernel_define}")

for kernel_include in KERNEL_INCLUDES:
    flags.append(f"-I{kernel_include}")

for project_include in PROJECT_INCLUDES:
    flags.append(f"-I{project_include}")

for extra_flag in EXTRA_FLAGS:
    flags.append(extra_flag)


################################

### YCM generator part below ###

################################


import os
import ycm_core


# Set this to the absolute path to the folder (NOT the file!) containing the
# compile_commands.json file to use that instead of 'flags'. See here for
# more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html
#
# You can get CMake to generate this file for you by adding:
#   set( CMAKE_EXPORT_COMPILE_COMMANDS 1 )
# to your CMakeLists.txt file.
#
# Most projects will NOT need to set this to anything; you can just change the
# 'flags' list of compilation flags. Notice that YCM itself uses that approach.
compilation_database_folder = ''

## 
SOURCE_EXTENSIONS = [
        '.c',
        '.cpp',
        '.cxx',
        '.cc',
        '.C',
        '.m',
        '.mm'
]

HEADER_EXTENSIONS = [
        '.h',
        '.hpp',
        '.hxx',
        '.H',
        '.hh'
]

PATH_FLAGS = [
        #'-isystem',
        #'-I',
        #'-iquote',
        #'--sysroot='
]
##

if os.path.exists( compilation_database_folder ):
  database = ycm_core.CompilationDatabase( compilation_database_folder )
else:
  database = None


def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = PATH_FLAGS
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in HEADER_EXTENSIONS


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }

def Settings(**kwargs):
  language = kwargs['language']
  if language == 'cfamily':
    return { 'flags' : flags }
  return {}
